
### THIS IS AN AUTO-GENERATED TEST SUITE, IT NEEDS TO BE COMPLETED WITH VALID DATA
### THESE ARE NOT ALL YOU NEED, MORE OF THEM MUST BE CREATED TO EVALUATE THE FUNCTIONAL
### REQUIREMENTS OF THE PROJECT AT HAND, THESE TEST ONLY TEST THE CRUD PORTION OF THE ENTITY.
### Silence is a DEAL research team project, more info about us in https://deal.us.es
@BASE = http://127.0.0.1:8080/api/v1

### Auxiliary query
### Positive test
### Test 00: Get all existing userhobbies
### This query is used in several of the below tests it should be executed first.
# @name userhobbies
GET {{BASE}}/userhobbies

### Register a new users and save the generated token 
### This token is used in several of the below tests it should be executed second.
# @name register
POST {{BASE}}/register 
Content-Type: application/json 

{ 
	"username": ###REPLACE###,
	"email": ###REPLACE###,
	"password": ###REPLACE###,
	"avatarUrl": ###REPLACE###,
	"dateOfBirth": ###REPLACE###,
	"registrationDate": ###REPLACE###,
	"withdrawalDate": ###REPLACE###,
	"gender": ###REPLACE###,
	"hairColor": ###REPLACE###,
	"eyeColor": ###REPLACE###,
	"height": ###REPLACE###,
	"wheight": ###REPLACE###,
	"bio": ###REPLACE###,
	"address": ###REPLACE###,
	"provinceId": ###REPLACE###,
	"municipalityId": ###REPLACE###,
	"postcodeId": ###REPLACE###
}

###
@token = {{register.response.body.sessionToken}}

### Test 01: Get one existing userhobbies by its id.
### positive test 
@useId = {userhobbies.response.body.0.userHobbyId}
GET {{BASE}}/userhobbies/{{useId}} 
Content-Type: application/json 


### Test 02: Try get one existing userhobbies by its nonexistent id.
### negative test 
GET {{BASE}}/userhobbies/999999999
Content-Type: application/json 


### Test 03: Add a new userhobbies successfully
### Positive test 
### We assume that the token has been aquired by the register request.
POST {{BASE}}/userhobbies 
Content-Type: application/json 
Token: {{token}} 

{
	"userId": ###REPLACE###,
	"hobbyId": ###REPLACE###
} 

### Test 04: Add a new userhobbies without a session token
### Negative test 
POST {{BASE}}/userhobbies 
Content-Type: application/json 

{ 
	"userId": ###REPLACE###,
	"hobbyId": ###REPLACE###
}

### Test 05: Modify an existing userhobbies 
### Positive test 
@useId = {{userhobbies.response.body.0.userHobbyId}} 
PUT {{BASE}}/userhobbies/{{useId}} 
Content-Type: application/json 
Token: {{token}} 

{ 
	"userId": ###REPLACE###,
	"hobbyId": ###REPLACE###
}

### Test 06: Try to modify an existing userhobbies without a session token
### Negative test
@useId = {{userhobbies.response.body.0.userHobbyId}}
PUT {{BASE}}/userhobbies/{{useId}}
Content-Type: application/json

{
	"userId": ###REPLACE###,
	"hobbyId": ###REPLACE###
}

### Test 07: Delete an existing userhobbies
### Positive test

### Create a new userhobbies, which we will delete
# @name createduseToDelete
POST {{BASE}}/userhobbies
Content-Type: application/json
Token: {{token}}

{
	"userId": ###REPLACE###,
	"hobbyId": ###REPLACE###
}
### Delete the userhobbies
@deptId = {createduseToDelete.response.body.lastId}
DELETE {{BASE}}/userhobbies/{{useId}}
Token: {{token}}

### Test 08: Try to delete a department without a session token
### Negative test
DELETE {{BASE}}/userhobbies/{{useId}}

